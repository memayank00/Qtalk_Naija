http://100.100.7.248/phpmyadmin/index.php?db=adore&table=user_device_token&target=sql.php&token=63f5b93c97e5b4312e8bf4ea8927fcb9#PMAURL-0:index.php?db=adore&table=user_device_token&server=1&target=sql.php&token=63f5b93c97e5b4312e8bf4ea8927fcb9

login -> /vipgroup-node
pm2 restart bin/exec.json

Flexsin Credential
-----------------------
Username       vern
Password        0OvC{$s?xS~+cgvdv1516mJH
Host                158.85.76.204 

0OvC{$s?xS~+cgvdv1516mJH

ssh vern@158.85.76.204

/Mayank/IT_Project/VIPChat/vipgroup-node

To Run AppRtc Server
----------------------
pm2 start ./bin/www  -n APPRTC


database--  mongo -u "FlexsinRootdDB" -p "jrF-E8jSxL_VI5U" --authenticationDatabase "admin"

for Cloning Project - git clone git@203.123.36.90:root/vipgroup-node.git


				<<<<<<<<--------------->>>>>>>>
				             Live
				<<<<<<<<--------------->>>>>>>>
Apprtc link- https://thevipgroup.com:3003/
(Ashok)- sudo ssh -i /var/www/html/localadorecom/data/vipgroup.pem ubuntu@thevipgroup.com
---------
Path of node code - cd /var/www/node/

AppRtc-
http://thevipgroup.com:3003/

Host              18.217.245.48
Domain         thevipgroup.com
Username     ubuntu
For login please use pem/ppk file

Database Details

Username     root
password       ViPGr0uPMYsQLPAssW0rd


ssl path

/etc/ssl/ssl
below files are within this(/etc/ssl/ssl) folder
78de5f1d1d658c86.crt  gd_bundle-g2-g1.crt  thevipgroup.com.zip  thevipgroup.csr  thevipgroup.key


sudo ssh -i vipgroup.pem ubuntu@18.217.245.48 

Mongodump Command
-------------------------
mongodump --username VIPchater --password 91SD88ng3fR2 --db vipchat
mongodump --username VIPchater2 --password 91SD88ng3fR2 --db vipchat_noqa
mongorestore -u "VIPchater" -p "91SD88ng3fR2" --db vipchat dump/vipchat_noqa/

live
-----
mongodump --username VIPchater2 --password 91SD88ng3fR2 --db vipchat_noqa

mongo -u VIPchater2 -p 91SD88ng3fR2 --authenticationDatabase "vipchat_noqa"
mongorestore -u "VIPchater" -p "91SD88ng3fR2" --db vipchat dump/vipchat_noqa/

-------------------------------------
Live Database Configuration steps
-------------------------------------

(1) use admin

(2) db.createUser({ user: "admin", pwd: "87gN_E6-0em_r-_-o", roles: [{ role: "userAdminAnyDatabase", db: "admin" }] })

(3) db.getUsers()

(4) show dbs

(5) use vipchat

(6) db.createUser({ user: "VIPchater", pwd: "91SD88ng3fR2", roles: [{ role: "dbOwner", db: "vipchat" }] })

(7) db.getUsers()

(8)     after then type sudo vim /etc/mongod.conf
	change  bindIp: 127.0.0.1 to bindIp: 0.0.0.0

	and  #security:  to security:
		            authorization : enabled

(9) sudo service mongod restart




-->to connct live database--  mongo -u "VIPchater" -p "91SD88ng3fR2" --authenticationDatabase "vipchat"

Start turn Server
--------------------
nohup turnserver

https://www.nomachine.com/AR07N00894








Please find the below Details

Develop -

main url: 158.85.76.204:8022

socket URL - 158.85.76.204:8018

API Base URL- http://vipgroup.flexsin.org


QA -

main url: 158.85.76.204:8021   

socket URL - 158.85.76.204:8016   

API Base URL- http://qa.vipgroup.flexsin.org


LIVE(Client URL)-

main url: 158.85.76.204:8022   

socket URL - 158.85.76.204:8018   

API Base URL- https://thevipgroup.com

-------------------------------------------------


{ "_id" : ObjectId("5b7aa00db07d21f0ce9f6523"), "updated_at" : ISODate("2018-08-21T06:04:20.700Z"), "created_at" : ISODate("2018-08-14T11:58:43.697Z"), "chat_status" : "Start", "isAdmin" : 1, "status" : "Connected", "currentUsers" : [ ], "chatUsers" : [ { "image" : "", "name" : "Admin", "_id" : "1" } ], "__v" : 0 }

-------------------------------->> CHAT list api before implementing admin chat
myChatList (req, res) {
        let obj = req.query, errorStack=[], resObj={},
        limit  = obj.limit ? parseInt(obj.limit) : env.listing.limit,
        page   = obj.page ? obj.page : 1,
        offset = parseInt((page - 1)) * limit;

        DECODE.required(req, res, (user)=>{
            /*if user is authenticated to view this chat other function will throw error*/
            let match  = {
                $and:[
                    {currentUsers : {$in : [user._id]}},
                    {isPaid : true},
                    {$or:[
                            {status : "Connected"},
                            {status : "Blocked"}
                        ]
                    }
                ]
            };
            /*when filtering message list*/
            /*filter using username*/
            if(obj.q) match.$and.push({"chatUsers.name":{ $regex : obj.q, $options : "i" }})
            ASYNC.waterfall([
                (callback) => {
                    /*Count total conversation*/
                    Conversation.count(
                      match,
                      (err, dataCount)=>{
                        console.log('dataCount---- ',dataCount)
                        resObj.total = dataCount ? dataCount : 0;
                        /*Bind data with callback*/
                        callback(null, resObj);
                    });
                },
                (resObj, callback) => {
                    /*Find user type for sugerbaby & sugardaddy*/
                    Conversation.findOne({"chatUsers._id":user._id},(err, data)=>{
                        /*function to search in array of object*/
                        function search(nameKey, myArray){
                            for (var i=0; i < myArray.length; i++) {
                                if (myArray[i]._id === nameKey) {
                                    return myArray[i];
                                }
                            }
                        }
                        if(data){
                            var resultObject = search(user._id, data.chatUsers);
                            //console.log('resultObject----> ',JSON.stringify(resultObject))
                            if(resultObject.userType==="4"){
                                //console.log("search for 3")
                                callback(null, resObj,"3");
                            }else{
                                //console.log("search for 4")
                                callback(null, resObj,"4");
                            }
                        }else{
                            callback('Convertation not found.', null);
                        }
                    });
                    
                },
                (resObj,searchfor, callback) => {


                    /**/
                    console.log('searchfor--> ',searchfor)
                    Conversation.aggregate([
                        { $lookup : { from : "chats", localField : "_id", foreignField : "conversationId", as : "conversation" } },
                        { $match : match },
                        { $project : { 
                             "_id": 1,
                             "status":1,
                             "block_id":1,
                             "blocker_user_id":1,
                             "expTime":"$muteObj.expTime",
                             "chatUsers":1, 
                             "currentUsers":1,
                             "created_at":1,
                             //"lastMessage": { "$arrayElemAt" : ["$conversation", -1] },
                             "lastMessage": { 
                                $filter : {
                                  input : "$conversation",
                                  as : "messages",
                                  cond : {
                                      "$eq": [
                                        { "$size": {
                                           "$setIntersection": [[user._id], '$$messages.deleteBy']
                                        }},
                                        0
                                      ]
                                  }
                                }
                             },
                             "total": { $size: "$conversation" }, 
                             "hideprofile" : {$size : "$hidden"},
                             "hidden" : 1,
                             "totalRead" : 
                                { $size : {
                                 $filter :
                                    { input : "$conversation", 
                                    as : "messages", 
                                    cond : { $setIsSubset: [[user._id], '$$messages.read'] } } 
                                    } 
                                }, 

                              "read" : 
                                    { 
                                    $filter : {
                                         input : "$conversation",as : "messages", 
                                         cond : { $setIsSubset: [[user._id], '$$messages.read'] } 
                                        }
                                  } 
                              } 
                        },

                        { 
                            $project : { 
                                 "_id": 1,
                                 "status":1,
                                 "block_id":1,
                                 "blocker_user_id":1, 
                                 "expTime":1,
                                 "lastMessage": { "$arrayElemAt" : ["$lastMessage", -1] },
                                 "hidec":{
                                    $cond : {
                                      if : {$eq : ["$hideprofile", 0] },
                                      then : "show",
                                      else : {
                                        $cond : {
                                          if : {
                                            $and : [
                                              {$eq : ["$hideprofile", 1]},
                                              {
                                                "$anyElementTrue": { "$map": {
                                                    "input": "$hidden",
                                                    "as": "el",
                                                    "in": { "$eq": [ "$$el", user._id ] }
                                                }}
                                              },
                                            ]
                                          },
                                          then : "show",
                                          else : "hide"
                                        }
                                      }
                                    }
                                 },
                                 /*"lastMessage.body": 1,
                                 "lastMessage.read": 1,
                                 "lastMessage.timestamp": 1, 
                                 "lastMessage.isEdited": 1, 
                                 "lastMessage.trash": 1, 
                                 "lastMessage._id": 1, 
                                 "lastMessage.mimeType": 1, 
                                 "lastMessage.duration": 1,
                                 "lastMessage.attachment": 1, 
                                 "lastMessage.deleteBy": 1,
                                 "lastMessage.index": { $indexOfArray: [ "$lastMessage.deleteBy", user._id ] },*/
                                 'chattingWith': { 
                                    $filter: { 
                                         input: '$chatUsers', as:'user', 
                                         cond: { $ne: [user._id, '$$user._id'] } 
                                     } 
                                 }, 
                                 "unread" : {$subtract:["$total","$totalRead"]} 
                            } 
                        },

                         { 
                            $project : { 
                                "_id": 1, 
                                "status":1,
                                "lastMessage.body": 1,
                                 "lastMessage.read": 1,
                                 "lastMessage.timestamp": 1, 
                                 "lastMessage.isEdited": 1, 
                                 "lastMessage.trash": 1, 
                                 "lastMessage._id": 1, 
                                 "lastMessage.mimeType": 1, 
                                 "lastMessage.duration": 1,
                                 "lastMessage.attachment": 1, 
                                 "lastMessage.deleteBy": 1,
                                 "lastMessage.index": { $indexOfArray: [ "$lastMessage.deleteBy", user._id ] },
                                "block_id":1,
                                "blocker_user_id":1, 
                                "expTime":1, 
                                "hidec":1, 
                                //"lastMessages":1,
                                /*"lastMessage": {
                                    $cond: {
                                        if: { $and:[{ $lt:["$lastMessage.index",0] },{ $ne: [ "$lastMessage.index", null] }] },
                                       //if: { $lt:["$lastMessage.index",0] },
                                       then: "$lastMessage",
                                       else: "$REMOVE"
                                    }
                                  },*/
                                 "chattingWith":1,
                                 "cond":1,
                                 "unread" : 1 
                            } 
                         },

                         { 
                            $project : { 
                                "_id": 1, 
                                "status":1,
                                
                                "block_id":1,
                                "blocker_user_id":1, 
                                "expTime":1, 
                                "hidec":1, 
                                //"lastMessages":1,
                                "lastMessage": {
                                    $cond: {
                                        if: { $and:[{ $lt:["$lastMessage.index",0] },{ $ne: [ "$lastMessage.index", null] }] },
                                       //if: { $lt:["$lastMessage.index",0] },
                                       then: "$lastMessage",
                                       else: "$REMOVE"
                                    }
                                  },
                                 "chattingWith":1,
                                 "cond":1,
                                 "unread" : 1 
                            } 
                         },

                        { $match : {"chattingWith.userType":searchfor, "hidec" : "show"} },  
                        { $unwind : "$chattingWith" },                     
                        { $sort : { "lastMessage.timestamp" : -1 } },
                        { $skip : offset },
                        { $limit : limit }
                    ])
                    .then(result=>callback(null,result));
                }
            ], (err, results) => {
                //console.log('results--> ',results)
                if(err) res.status(412).json({type:"error",message:ERROR.oops(),errors:ERROR.pull(err)});
                if(results) {
                    res.json({type:"success",message:"chat list returned",data:results,paging:PAGINATE._paging(resObj.total,results,parseInt(page),limit)});
                }
            });
        });
    }
----------------------------------

